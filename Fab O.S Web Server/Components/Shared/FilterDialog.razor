@namespace FabOS.WebServer.Components.Shared
@using FabOS.WebServer.Models.Filtering
@using System
@using System.Linq
@using System.Reflection
@typeparam TItem

<div class="filter-dialog-container">
    <button class="filter-button @(isOpen ? "active" : "")" @onclick="ToggleFilter">
        <i class="fas fa-filter"></i>
        <span>Filter</span>
        @if (activeFilters.Any())
        {
            <span class="filter-badge">@activeFilters.Count</span>
        }
    </button>

    @if (isOpen)
    {
        <div class="filter-dialog">
            <div class="filter-dialog-header">
                <h4>Filter Options</h4>
                <button class="close-btn" @onclick="CloseFilter">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="filter-dialog-body">
                <div class="filter-rule-builder">
                    <h5>Add Filter Rule</h5>
                    <div class="filter-row">
                        <select class="filter-field" @bind="currentField">
                            <option value="">Select Field...</option>
                            @foreach (var field in availableFields)
                            {
                                <option value="@field.PropertyName">@field.DisplayName</option>
                            }
                        </select>

                        <select class="filter-operator" @bind="currentOperator" disabled="@string.IsNullOrEmpty(currentField)">
                            <option value="">Select Operator...</option>
                            <option value="@FilterOperator.Equals">Equals</option>
                            <option value="@FilterOperator.NotEquals">Not Equals</option>
                            <option value="@FilterOperator.Contains">Contains</option>
                            <option value="@FilterOperator.StartsWith">Starts With</option>
                            <option value="@FilterOperator.EndsWith">Ends With</option>
                            <option value="@FilterOperator.GreaterThan">Greater Than</option>
                            <option value="@FilterOperator.LessThan">Less Than</option>
                            <option value="@FilterOperator.Between">Between</option>
                        </select>

                        <input type="text"
                               class="filter-value"
                               placeholder="Enter value..."
                               @bind="currentValue"
                               disabled="@(string.IsNullOrEmpty(currentField) || currentOperator == null)" />

                        @if (currentOperator == FilterOperator.Between)
                        {
                            <span class="between-separator">and</span>
                            <input type="text"
                                   class="filter-value"
                                   placeholder="Second value..."
                                   @bind="currentSecondValue" />
                        }

                        <button class="btn-add-filter"
                                @onclick="AddFilter"
                                disabled="@(!CanAddFilter())">
                            <i class="fas fa-plus"></i> Add
                        </button>
                    </div>
                </div>

                @if (workingFilters.Any())
                {
                    <div class="active-filters-section">
                        <h5>Active Filters</h5>
                        <div class="filter-chips">
                            @foreach (var filter in workingFilters)
                            {
                                <div class="filter-chip">
                                    <span class="chip-field">@GetFieldDisplay(filter.Field)</span>
                                    <span class="chip-operator">@GetOperatorDisplay(filter.Operator)</span>
                                    <span class="chip-value">@filter.Value</span>
                                    @if (filter.SecondValue != null)
                                    {
                                        <span class="chip-value">- @filter.SecondValue</span>
                                    }
                                    <button class="chip-remove" @onclick="() => RemoveFilter(filter)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="filter-dialog-footer">
                <button class="btn-secondary" @onclick="ClearAllFilters">Clear All</button>
                <button class="btn-primary" @onclick="ApplyFilters">Apply Filters</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<List<FilterRule>> OnFiltersChanged { get; set; }
    [Parameter] public List<FilterDefinition> FilterDefinitions { get; set; } = new();

    private bool isOpen = false;
    private List<FilterRule> activeFilters = new();
    private List<FilterRule> workingFilters = new();
    private List<FilterFieldDefinition> availableFields = new();

    private string currentField = "";
    private FilterOperator? currentOperator = null;
    private string currentValue = "";
    private string currentSecondValue = "";

    protected override void OnInitialized()
    {
        InitializeAvailableFields();
    }

    private void InitializeAvailableFields()
    {
        try
        {
            var itemType = typeof(TItem);
            availableFields = itemType.GetProperties()
                .Where(p => p.CanRead && IsFilterableType(p.PropertyType))
                .Select(p => new FilterFieldDefinition
                {
                    PropertyName = p.Name,
                    DisplayName = GetDisplayName(p.Name),
                    DataType = GetDataType(p.PropertyType)
                })
                .OrderBy(f => f.DisplayName)
                .ToList();
        }
        catch (Exception ex)
        {
            // Log error and provide empty field list
            Console.WriteLine($"Error initializing filter fields: {ex.Message}");
            availableFields = new List<FilterFieldDefinition>();
        }
    }

    private bool IsFilterableType(Type type)
    {
        return type == typeof(string) ||
               type == typeof(int) || type == typeof(int?) ||
               type == typeof(decimal) || type == typeof(decimal?) ||
               type == typeof(DateTime) || type == typeof(DateTime?) ||
               type == typeof(bool) || type == typeof(bool?) ||
               type.IsEnum;
    }

    private string GetDisplayName(string propertyName)
    {
        return System.Text.RegularExpressions.Regex.Replace(propertyName, "([A-Z])", " $1").Trim();
    }

    private string GetDataType(Type type)
    {
        if (type == typeof(string)) return "string";
        if (type == typeof(int) || type == typeof(int?) ||
            type == typeof(decimal) || type == typeof(decimal?)) return "number";
        if (type == typeof(DateTime) || type == typeof(DateTime?)) return "date";
        if (type == typeof(bool) || type == typeof(bool?)) return "boolean";
        if (type.IsEnum) return "enum";
        return "string";
    }

    private void ToggleFilter()
    {
        isOpen = !isOpen;
        if (isOpen)
        {
            workingFilters = activeFilters.Select(f => new FilterRule
            {
                Id = f.Id,
                Field = f.Field,
                Operator = f.Operator,
                Value = f.Value,
                SecondValue = f.SecondValue
            }).ToList();
        }
    }

    private void CloseFilter()
    {
        isOpen = false;
        ClearCurrentFilter();
    }

    private bool CanAddFilter()
    {
        return !string.IsNullOrEmpty(currentField) &&
               currentOperator != null &&
               !string.IsNullOrEmpty(currentValue);
    }

    private void AddFilter()
    {
        if (CanAddFilter())
        {
            workingFilters.Add(new FilterRule
            {
                Id = Guid.NewGuid().ToString(),
                Field = currentField,
                FieldName = GetFieldDisplay(currentField),
                Operator = currentOperator.Value,
                Value = currentValue,
                SecondValue = currentOperator == FilterOperator.Between ? currentSecondValue : null
            });

            ClearCurrentFilter();
        }
    }

    private void RemoveFilter(FilterRule filter)
    {
        workingFilters.Remove(filter);
    }

    private void ClearCurrentFilter()
    {
        currentField = "";
        currentOperator = null;
        currentValue = "";
        currentSecondValue = "";
    }

    private void ClearAllFilters()
    {
        workingFilters.Clear();
        ClearCurrentFilter();
    }

    private async Task ApplyFilters()
    {
        activeFilters = workingFilters.ToList();
        await OnFiltersChanged.InvokeAsync(activeFilters);
        isOpen = false;
    }

    private string GetFieldDisplay(string field)
    {
        var fieldDef = availableFields.FirstOrDefault(f => f.PropertyName == field);
        return fieldDef?.DisplayName ?? field;
    }

    private string GetOperatorDisplay(FilterOperator op)
    {
        return op switch
        {
            FilterOperator.Equals => "=",
            FilterOperator.NotEquals => "â‰ ",
            FilterOperator.Contains => "contains",
            FilterOperator.StartsWith => "starts with",
            FilterOperator.EndsWith => "ends with",
            FilterOperator.GreaterThan => ">",
            FilterOperator.LessThan => "<",
            FilterOperator.Between => "between",
            _ => op.ToString()
        };
    }
}