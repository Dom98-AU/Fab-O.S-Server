@namespace SteelEstimation.Web.Components.Shared.Common
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using SteelEstimation.Core.Models
@using SteelEstimation.Core.Interfaces

<div class="filter-system">
    <!-- Main Filter Bar -->
    <div class="filter-bar">
        <div class="filter-bar-left">
            <!-- Search Box -->
            @if (ShowSearch)
            {
                <div class="filter-search">
                    <div class="search-input-group">
                        <span class="search-icon">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" 
                               class="search-input" 
                               placeholder="@SearchPlaceholder"
                               value="@searchTerm"
                               @oninput="@(e => UpdateSearch(e.Value?.ToString()))" />
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="clear-search" @onclick="ClearSearch">
                                <i class="fas fa-times"></i>
                            </button>
                        }
                    </div>
                </div>
            }
            
            <!-- Quick Filters -->
            @if (QuickFilters?.Any() == true)
            {
                <div class="quick-filters">
                    @foreach (var filter in QuickFilters)
                    {
                        <button class="btn btn-sm @(IsQuickFilterActive(filter) ? "btn-primary" : "btn-outline-primary")"
                                @onclick="() => ToggleQuickFilter(filter)">
                            @if (!string.IsNullOrEmpty(filter.Icon))
                            {
                                <i class="@filter.Icon me-1"></i>
                            }
                            @filter.Label
                            @if (IsQuickFilterActive(filter))
                            {
                                <span class="badge bg-white text-primary ms-1">âœ“</span>
                            }
                        </button>
                    }
                </div>
            }
        </div>
        
        <div class="filter-bar-right">
            <!-- Active Filter Count -->
            @if (activeFilters.Any())
            {
                <span class="active-filter-count">
                    @activeFilters.Count filter@(activeFilters.Count == 1 ? "" : "s")
                </span>
            }
            
            <!-- Advanced Filter Toggle -->
            @if (ShowAdvancedFilters)
            {
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleAdvancedPanel">
                    <i class="fas fa-filter me-1"></i>
                    Advanced
                    @if (advancedPanelOpen)
                    {
                        <i class="fas fa-chevron-up ms-1"></i>
                    }
                    else
                    {
                        <i class="fas fa-chevron-down ms-1"></i>
                    }
                </button>
            }
            
            <!-- Clear All -->
            @if (activeFilters.Any() || !string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn btn-sm btn-link text-danger" @onclick="ClearAllFilters">
                    Clear All
                </button>
            }
        </div>
    </div>
    
    <!-- Advanced Filters Panel -->
    @if (ShowAdvancedFilters && advancedPanelOpen)
    {
        <div class="advanced-filters-panel">
            <div class="row">
                @foreach (var column in FilterableColumns)
                {
                    <div class="col-md-4 col-lg-3 mb-3">
                        <div class="filter-field">
                            <label class="filter-label">@column.DisplayName</label>
                            @RenderFilterControl(column)
                        </div>
                    </div>
                }
            </div>
            
            <div class="filter-panel-actions">
                <button class="btn btn-primary btn-sm" @onclick="ApplyAdvancedFilters">
                    Apply Filters
                </button>
                <button class="btn btn-secondary btn-sm" @onclick="ResetAdvancedFilters">
                    Reset
                </button>
            </div>
        </div>
    }
    
    <!-- Applied Filters Display -->
    @if (ShowAppliedFilters && appliedFilters.Any())
    {
        <div class="applied-filters">
            @foreach (var filter in appliedFilters)
            {
                <div class="filter-chip">
                    <span class="filter-chip-label">@filter.DisplayName:</span>
                    <span class="filter-chip-value">@filter.DisplayValue</span>
                    <button class="filter-chip-remove" @onclick="() => RemoveFilter(filter)">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>

@code {
    [Inject] private IJSRuntime JS { get; set; } = default!;
    
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public List<QuickFilter>? QuickFilters { get; set; }
    [Parameter] public bool ShowAdvancedFilters { get; set; } = true;
    [Parameter] public bool ShowAppliedFilters { get; set; } = true;
    [Parameter] public List<ColumnDefinition<object>>? FilterableColumns { get; set; }
    [Parameter] public EventCallback<FilterChangeEventArgs> OnFilterChanged { get; set; }
    
    private string searchTerm = "";
    private bool advancedPanelOpen = false;
    private List<AppliedFilter> activeFilters = new();
    private List<AppliedFilter> appliedFilters = new();
    private Dictionary<string, object?> filterValues = new();
    private HashSet<string> activeQuickFilters = new();
    
    private async Task UpdateSearch(string? value)
    {
        searchTerm = value ?? "";
        await NotifyFilterChange();
    }
    
    private async Task ClearSearch()
    {
        searchTerm = "";
        await NotifyFilterChange();
    }
    
    private void ToggleAdvancedPanel()
    {
        advancedPanelOpen = !advancedPanelOpen;
    }
    
    private async Task ToggleQuickFilter(QuickFilter filter)
    {
        if (activeQuickFilters.Contains(filter.Key))
        {
            activeQuickFilters.Remove(filter.Key);
        }
        else
        {
            activeQuickFilters.Add(filter.Key);
        }
        await NotifyFilterChange();
    }
    
    private bool IsQuickFilterActive(QuickFilter filter)
    {
        return activeQuickFilters.Contains(filter.Key);
    }
    
    private RenderFragment RenderFilterControl(ColumnDefinition<object> column)
    {
        return builder =>
        {
            var key = column.Key;
            
            switch (column.DataType)
            {
                case "string":
                    builder.OpenElement(0, "input");
                    builder.AddAttribute(1, "type", "text");
                    builder.AddAttribute(2, "class", "form-control form-control-sm");
                    builder.AddAttribute(3, "placeholder", $"Filter {column.DisplayName}");
                    builder.AddAttribute(4, "value", filterValues.GetValueOrDefault(key, ""));
                    builder.AddAttribute(5, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(
                        this, e => UpdateFilterValue(key, e.Value)));
                    builder.CloseElement();
                    break;
                    
                case "number":
                case "decimal":
                    builder.OpenElement(0, "input");
                    builder.AddAttribute(1, "type", "number");
                    builder.AddAttribute(2, "class", "form-control form-control-sm");
                    builder.AddAttribute(3, "placeholder", $"Filter {column.DisplayName}");
                    builder.AddAttribute(4, "value", filterValues.GetValueOrDefault(key, ""));
                    builder.AddAttribute(5, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(
                        this, e => UpdateFilterValue(key, e.Value)));
                    builder.CloseElement();
                    break;
                    
                case "date":
                case "datetime":
                    builder.OpenElement(0, "input");
                    builder.AddAttribute(1, "type", "date");
                    builder.AddAttribute(2, "class", "form-control form-control-sm");
                    builder.AddAttribute(3, "value", filterValues.GetValueOrDefault(key, ""));
                    builder.AddAttribute(4, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(
                        this, e => UpdateFilterValue(key, e.Value)));
                    builder.CloseElement();
                    break;
                    
                case "boolean":
                    builder.OpenElement(0, "select");
                    builder.AddAttribute(1, "class", "form-select form-select-sm");
                    builder.AddAttribute(2, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(
                        this, e => UpdateFilterValue(key, e.Value)));
                    
                    builder.OpenElement(3, "option");
                    builder.AddAttribute(4, "value", "");
                    builder.AddContent(5, "All");
                    builder.CloseElement();
                    
                    builder.OpenElement(6, "option");
                    builder.AddAttribute(7, "value", "true");
                    builder.AddAttribute(8, "selected", filterValues.GetValueOrDefault(key)?.ToString() == "true");
                    builder.AddContent(9, "Yes");
                    builder.CloseElement();
                    
                    builder.OpenElement(10, "option");
                    builder.AddAttribute(11, "value", "false");
                    builder.AddAttribute(12, "selected", filterValues.GetValueOrDefault(key)?.ToString() == "false");
                    builder.AddContent(13, "No");
                    builder.CloseElement();
                    
                    builder.CloseElement();
                    break;
            }
        };
    }
    
    private void UpdateFilterValue(string key, object? value)
    {
        if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
        {
            filterValues.Remove(key);
        }
        else
        {
            filterValues[key] = value;
        }
    }
    
    private async Task ApplyAdvancedFilters()
    {
        activeFilters.Clear();
        
        foreach (var kvp in filterValues)
        {
            var column = FilterableColumns?.FirstOrDefault(c => c.Key == kvp.Key);
            if (column != null && kvp.Value != null)
            {
                activeFilters.Add(new AppliedFilter
                {
                    Key = kvp.Key,
                    DisplayName = column.DisplayName,
                    Value = kvp.Value.ToString() ?? "",
                    DisplayValue = kvp.Value.ToString() ?? ""
                });
            }
        }
        
        appliedFilters = new List<AppliedFilter>(activeFilters);
        advancedPanelOpen = false;
        await NotifyFilterChange();
    }
    
    private void ResetAdvancedFilters()
    {
        filterValues.Clear();
        activeFilters.Clear();
    }
    
    private async Task RemoveFilter(AppliedFilter filter)
    {
        activeFilters.Remove(filter);
        appliedFilters.Remove(filter);
        filterValues.Remove(filter.Key);
        await NotifyFilterChange();
    }
    
    private async Task ClearAllFilters()
    {
        searchTerm = "";
        activeFilters.Clear();
        appliedFilters.Clear();
        filterValues.Clear();
        activeQuickFilters.Clear();
        await NotifyFilterChange();
    }
    
    private async Task NotifyFilterChange()
    {
        var args = new FilterChangeEventArgs
        {
            SearchTerm = searchTerm,
            Filters = appliedFilters,
            QuickFilters = activeQuickFilters.ToList()
        };
        
        await OnFilterChanged.InvokeAsync(args);
    }
    
    public class FilterChangeEventArgs
    {
        public string SearchTerm { get; set; } = "";
        public List<AppliedFilter> Filters { get; set; } = new();
        public List<string> QuickFilters { get; set; } = new();
    }
    
    public class QuickFilter
    {
        public string Key { get; set; } = "";
        public string Label { get; set; } = "";
        public string? Icon { get; set; }
        public Func<object, bool>? Predicate { get; set; }
    }
}