@using SteelEstimation.Core.Models
@using SteelEstimation.Core.Entities
@using Microsoft.AspNetCore.Components
@typeparam TItem where TItem : class, new()
@inject IJSRuntime JSRuntime

<div class="editable-card @(IsSelected ? "selected" : "") @(IsEditing ? "editing" : "")" @onclick="HandleCardClick">
    <div class="card h-100">
        @if (Config?.ShowSelectionColumn == true)
        {
            <div class="card-header p-2 d-flex align-items-center">
                <input type="checkbox" class="form-check-input me-2" 
                       checked="@IsSelected"
                       @onclick:stopPropagation="true"
                       @onchange="() => OnSelectionChanged.InvokeAsync(!IsSelected)" />
                <span class="text-muted small">@GetTitle()</span>
            </div>
        }
        
        <div class="card-body">
            @if (IsEditing)
            {
                <!-- Edit Mode -->
                <div class="edit-fields">
                    @foreach (var column in Config?.Columns ?? new())
                    {
                        if (column.IsVisible && column.IsEditable)
                        {
                            <div class="mb-3">
                                <label class="form-label small fw-semibold">@column.DisplayName</label>
                                <EditableCell TItem="TItem"
                                             Item="@editItem"
                                             Template="@column"
                                             OnValueChanged="@(value => HandleCellValueChanged(column, value))" />
                            </div>
                        }
                    }
                </div>
                
                <div class="mt-3 d-flex gap-2">
                    <button class="btn btn-sm btn-success" @onclick:stopPropagation="true" @onclick="SaveChanges">
                        <i class="fas fa-check"></i> Save
                    </button>
                    <button class="btn btn-sm btn-secondary" @onclick:stopPropagation="true" @onclick="CancelEdit">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            }
            else
            {
                <!-- View Mode -->
                @foreach (var column in GetDisplayColumns())
                {
                    <div class="card-field mb-2">
                        <span class="field-label">@column.DisplayName:</span>
                        <span class="field-value">
                            @if (column.Type == CellType.Image)
                            {
                                var value = column.GetValue?.Invoke(Item);
                                @if (value is List<ImageUpload> images && images.Any())
                                {
                                    <div class="image-preview-row">
                                        @foreach (var img in images.Take(3))
                                        {
                                            <img src="@img.FilePath" class="img-thumbnail" alt="Image" />
                                        }
                                        @if (images.Count > 3)
                                        {
                                            <span class="text-muted small ms-1">+@(images.Count - 3)</span>
                                        }
                                    </div>
                                }
                                else if (value is string imageUrl && !string.IsNullOrEmpty(imageUrl))
                                {
                                    <img src="@imageUrl" class="img-thumbnail" alt="Image" />
                                }
                                else
                                {
                                    <span class="text-muted small">No images</span>
                                }
                            }
                            else if (column.ComputeDisplay != null)
                            {
                                @column.ComputeDisplay(Item)
                            }
                            else
                            {
                                var value = column.GetValue?.Invoke(Item);
                                @if (value != null)
                                {
                                    @value
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            }
                        </span>
                    </div>
                }
                
                <div class="mt-3 d-flex gap-2">
                    <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="StartEdit">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    @if (Config?.AllowDeleteRows == true)
                    {
                        <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="DeleteItem">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public TItem? Item { get; set; }
    [Parameter] public EditableTableConfig<TItem>? Config { get; set; }
    [Parameter] public bool IsSelected { get; set; }
    [Parameter] public EventCallback<bool> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<TItem> OnSave { get; set; }
    [Parameter] public EventCallback<TItem> OnDelete { get; set; }
    [Parameter] public EventCallback<TItem> OnEdit { get; set; }
    
    private bool IsEditing = false;
    private TItem? editItem;
    private Dictionary<string, bool> validationErrors = new();
    private System.Timers.Timer? autoSaveTimer;
    
    protected override void OnInitialized()
    {
        if (Config?.AutoSave == true && Config.AutoSaveDelayMs > 0)
        {
            autoSaveTimer = new System.Timers.Timer(Config.AutoSaveDelayMs);
            autoSaveTimer.Elapsed += async (sender, e) => await AutoSave();
            autoSaveTimer.AutoReset = false;
        }
    }
    
    private string GetTitle()
    {
        if (Item == null) return "Item";
        
        // Try to get a title from the first text column or any column with a value
        var titleColumn = Config?.Columns.FirstOrDefault(c => c.Type == CellType.Text && c.GetValue != null);
        if (titleColumn == null)
        {
            titleColumn = Config?.Columns.FirstOrDefault(c => c.GetValue != null);
        }
        
        return titleColumn?.GetValue?.Invoke(Item)?.ToString() ?? "Item";
    }
    
    private IEnumerable<CellTemplate<TItem>> GetDisplayColumns()
    {
        // Show up to 4 key fields in view mode
        return Config?.Columns.Where(c => c.IsVisible).Take(4) ?? Enumerable.Empty<CellTemplate<TItem>>();
    }
    
    private void HandleCardClick()
    {
        // Only enter edit mode on card click if configured
        if (!IsEditing && Config?.EnableKeyboardNavigation == true)
        {
            StartEdit();
        }
    }
    
    private void StartEdit()
    {
        if (Item == null) return;
        
        IsEditing = true;
        // Create a deep copy for editing
        editItem = CloneItem(Item);
        validationErrors.Clear();
        
        // Notify parent that editing started
        OnEdit.InvokeAsync(Item);
        StateHasChanged();
    }
    
    private void CancelEdit()
    {
        IsEditing = false;
        editItem = null;
        validationErrors.Clear();
        autoSaveTimer?.Stop();
        StateHasChanged();
    }
    
    private async Task SaveChanges()
    {
        if (editItem == null) return;
        
        // Validate all fields
        bool hasErrors = false;
        foreach (var column in Config?.Columns ?? new())
        {
            if (column.Validate != null)
            {
                var value = column.GetValue?.Invoke(editItem);
                var error = column.Validate(editItem, value);
                if (!string.IsNullOrEmpty(error))
                {
                    validationErrors[column.Key] = true;
                    hasErrors = true;
                }
            }
        }
        
        if (hasErrors)
        {
            StateHasChanged();
            return;
        }
        
        // Copy edited values back to original item
        CopyItemValues(editItem, Item!);
        
        IsEditing = false;
        editItem = null;
        validationErrors.Clear();
        autoSaveTimer?.Stop();
        
        await OnSave.InvokeAsync(Item);
        StateHasChanged();
    }
    
    private async Task DeleteItem()
    {
        if (Item != null)
        {
            await OnDelete.InvokeAsync(Item);
        }
    }
    
    private async Task HandleCellValueChanged(CellTemplate<TItem> column, object? value)
    {
        if (editItem == null) return;
        
        // Set the value
        column.SetValue?.Invoke(editItem, value);
        
        // Validate
        if (column.Validate != null)
        {
            var error = column.Validate(editItem, value);
            if (!string.IsNullOrEmpty(error))
            {
                validationErrors[column.Key] = true;
            }
            else
            {
                validationErrors.Remove(column.Key);
            }
        }
        
        // Trigger auto-save timer
        if (Config?.AutoSave == true && !validationErrors.Any())
        {
            autoSaveTimer?.Stop();
            autoSaveTimer?.Start();
        }
        
        StateHasChanged();
    }
    
    private async Task AutoSave()
    {
        await InvokeAsync(async () =>
        {
            if (!validationErrors.Any())
            {
                await SaveChanges();
            }
        });
    }
    
    private TItem CloneItem(TItem source)
    {
        // Simple clone - for more complex objects, implement ICloneable or use a deep copy library
        var json = System.Text.Json.JsonSerializer.Serialize(source);
        return System.Text.Json.JsonSerializer.Deserialize<TItem>(json) ?? new TItem();
    }
    
    private void CopyItemValues(TItem source, TItem target)
    {
        // Copy all property values from source to target
        foreach (var prop in typeof(TItem).GetProperties())
        {
            if (prop.CanRead && prop.CanWrite)
            {
                prop.SetValue(target, prop.GetValue(source));
            }
        }
    }
    
    public void Dispose()
    {
        autoSaveTimer?.Dispose();
    }
}

<style>
    .editable-card {
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .editable-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .editable-card.selected .card {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .editable-card.editing .card {
        border-color: #ffc107;
        background-color: #fffef5;
        box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.25);
    }
    
    .card-field {
        display: flex;
        justify-content: space-between;
        align-items: start;
        padding: 0.5rem 0;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .card-field:last-child {
        border-bottom: none;
    }
    
    .field-label {
        font-weight: 600;
        font-size: 0.875rem;
        color: #6c757d;
        min-width: 100px;
        flex-shrink: 0;
    }
    
    .field-value {
        font-size: 0.875rem;
        text-align: right;
        flex-grow: 1;
    }
    
    .image-preview-row {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        justify-content: flex-end;
    }
    
    .image-preview-row .img-thumbnail {
        width: 50px;
        height: 50px;
        object-fit: cover;
        cursor: pointer;
    }
    
    .edit-fields {
        max-height: 450px;
        overflow-y: auto;
        padding-right: 0.5rem;
    }
    
    .edit-fields::-webkit-scrollbar {
        width: 6px;
    }
    
    .edit-fields::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }
    
    .edit-fields::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }
    
    .edit-fields::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
    
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .card-field {
            flex-direction: column;
            align-items: start;
        }
        
        .field-value {
            text-align: left;
            margin-top: 0.25rem;
        }
        
        .image-preview-row {
            justify-content: flex-start;
        }
    }
</style>