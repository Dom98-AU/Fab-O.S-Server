@namespace SteelEstimation.Web.Components.Shared.Common
@using Microsoft.AspNetCore.Components
@using SteelEstimation.Core.Models

@if (Actions?.Any(a => a.IsVisible) == true)
{
    <div class="toolbar-dropdown">
        <button class="btn btn-toolbar @ButtonClass dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            @if (!string.IsNullOrEmpty(ButtonIcon))
            {
                <i class="@ButtonIcon"></i>
            }
            <span>@ButtonText</span>
            @if (BadgeCount > 0)
            {
                <span class="badge bg-danger ms-1">@BadgeCount</span>
            }
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
            @foreach (var action in Actions.Where(a => a.IsVisible))
            {
                @if (action.IsDivider)
                {
                    <li><hr class="dropdown-divider"></li>
                }
                else if (!string.IsNullOrEmpty(action.NavigateUrl))
                {
                    <li>
                        <a class="dropdown-item @GetActionClass(action)" 
                           href="@action.NavigateUrl"
                           title="@action.Tooltip">
                            @if (!string.IsNullOrEmpty(action.Icon))
                            {
                                <i class="@action.Icon me-2"></i>
                            }
                            <span>@action.Label</span>
                            @if (action.BadgeCount > 0)
                            {
                                <span class="badge bg-secondary ms-auto">@action.BadgeCount</span>
                            }
                        </a>
                    </li>
                }
                else
                {
                    <li>
                        <button class="dropdown-item @GetActionClass(action)" 
                                type="button" 
                                @onclick="async () => await ExecuteAction(action)"
                                disabled="@(!action.IsEnabled)"
                                title="@action.Tooltip">
                            @if (!string.IsNullOrEmpty(action.Icon))
                            {
                                <i class="@action.Icon me-2"></i>
                            }
                            <span>@action.Label</span>
                            @if (action.BadgeCount > 0)
                            {
                                <span class="badge bg-secondary ms-auto">@action.BadgeCount</span>
                            }
                        </button>
                    </li>
                }
            }
        </ul>
    </div>
}
else if (ShowEmptyState)
{
    <div class="toolbar-dropdown">
        <button class="btn btn-toolbar @ButtonClass" type="button" disabled>
            @if (!string.IsNullOrEmpty(ButtonIcon))
            {
                <i class="@ButtonIcon"></i>
            }
            <span>@ButtonText</span>
        </button>
    </div>
}

@code {
    /// <summary>
    /// List of actions to display in the dropdown
    /// </summary>
    [Parameter] public List<ToolbarAction>? Actions { get; set; }
    
    /// <summary>
    /// Text to display on the dropdown button
    /// </summary>
    [Parameter] public string ButtonText { get; set; } = "Actions";
    
    /// <summary>
    /// Icon CSS class for the dropdown button
    /// </summary>
    [Parameter] public string ButtonIcon { get; set; } = "";
    
    /// <summary>
    /// Additional CSS class for the button (e.g., "btn-report", "btn-actions")
    /// </summary>
    [Parameter] public string ButtonClass { get; set; } = "";
    
    /// <summary>
    /// Badge count to display on the button
    /// </summary>
    [Parameter] public int BadgeCount { get; set; }
    
    /// <summary>
    /// Whether to show the button in disabled state when no actions
    /// </summary>
    [Parameter] public bool ShowEmptyState { get; set; } = false;
    
    /// <summary>
    /// Optional callback when an action is executed
    /// </summary>
    [Parameter] public EventCallback<ToolbarAction> OnActionExecuted { get; set; }
    
    private async Task ExecuteAction(ToolbarAction action)
    {
        if (!action.IsEnabled)
            return;
            
        if (action.OnClick != null)
        {
            await action.OnClick.Invoke();
        }
        
        if (OnActionExecuted.HasDelegate)
        {
            await OnActionExecuted.InvokeAsync(action);
        }
    }
    
    private string GetActionClass(ToolbarAction action)
    {
        var classes = new List<string>();
        
        if (action.IsDestructive)
            classes.Add("text-danger");
            
        if (!action.IsEnabled)
            classes.Add("disabled");
            
        return string.Join(" ", classes);
    }
}