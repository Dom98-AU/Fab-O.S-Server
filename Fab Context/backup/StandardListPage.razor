@typeparam TItem
@using Microsoft.AspNetCore.Components

<style>
    .list-header {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        padding: 1rem 0;
        margin-bottom: 1.5rem;
    }
    
    .search-filters {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        padding: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .table-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        overflow: hidden;
    }
    
    .table thead th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.875rem;
        letter-spacing: 0.05em;
    }
    
    .table tbody tr:hover {
        background-color: rgba(0,123,255,0.02);
        cursor: pointer;
    }
    
    .table tbody tr.selected {
        background-color: rgba(0,123,255,0.1);
    }
    
    .action-buttons .btn {
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
    }
    
    .unique-id {
        font-family: monospace;
        font-size: 0.875rem;
        color: #6c757d;
    }
    
    .bulk-actions {
        background-color: #e9ecef;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 1rem;
    }
</style>

<div class="list-header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col">
                <h1 class="mb-0">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="@Icon me-2"></i>
                    }
                    @Title
                </h1>
                @if (!string.IsNullOrEmpty(Subtitle))
                {
                    <p class="text-muted mb-0">@Subtitle</p>
                }
            </div>
            <div class="col-auto">
                @HeaderActions
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="search-filters">
        <div class="row g-3">
            <div class="col-md-4">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="@SearchPlaceholder"
                           @bind="SearchTerm" @bind:event="oninput" />
                    @if (!string.IsNullOrEmpty(SearchTerm))
                    {
                        <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </div>
            </div>
            @if (FilterOptions != null)
            {
                <div class="col-md-8">
                    <div class="row g-2">
                        @FilterOptions
                    </div>
                </div>
            }
        </div>
    </div>

    @if (SelectedItems.Any())
    {
        <div class="bulk-actions">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" checked @onchange="ToggleSelectAll">
                <label class="form-check-label">
                    @SelectedItems.Count selected
                </label>
            </div>
            <div class="ms-auto">
                @if (ShowBulkDelete)
                {
                    <button class="btn btn-sm btn-danger" @onclick="OnBulkDelete">
                        <i class="fas fa-trash me-1"></i>Delete Selected
                    </button>
                }
                @BulkActions
            </div>
        </div>
    }

    <div class="table-container">
        @if (Items == null)
        {
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading @Title.ToLower()...</p>
            </div>
        }
        else if (!Items.Any())
        {
            <div class="text-center p-5">
                <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                <p class="text-muted">@EmptyMessage</p>
                @EmptyActions
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th style="width: 40px;">
                                <input class="form-check-input" type="checkbox" 
                                       @onchange="ToggleSelectAll">
                            </th>
                            @if (ShowUniqueId)
                            {
                                <th style="width: 100px;">ID</th>
                            }
                            @TableHeaders
                            <th style="width: 120px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in PagedItems)
                        {
                            <tr class="@(SelectedItems.Contains(item) ? "selected" : "")"
                                @onclick="() => OnRowClick(item)">
                                <td @onclick:stopPropagation="true">
                                    <input class="form-check-input" type="checkbox"
                                           checked="@SelectedItems.Contains(item)"
                                           @onchange="() => ToggleItemSelection(item)">
                                </td>
                                @if (ShowUniqueId)
                                {
                                    <td class="unique-id">
                                        @GetUniqueId?.Invoke(item)
                                    </td>
                                }
                                @RowTemplate(item)
                                <td class="action-buttons" @onclick:stopPropagation="true">
                                    <div class="btn-group btn-group-sm" role="group">
                                        @if (ShowView)
                                        {
                                            <button class="btn btn-outline-primary" title="View"
                                                    @onclick="() => OnView(item)">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        }
                                        @if (ShowEdit)
                                        {
                                            <button class="btn btn-outline-secondary" title="Edit"
                                                    @onclick="() => OnEdit(item)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        }
                                        @if (ShowDelete)
                                        {
                                            <button class="btn btn-outline-danger" title="Delete"
                                                    @onclick="() => OnDelete(item)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                        @ItemActions?.Invoke(item)
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (TotalPages > 1)
            {
                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted">
                        Showing @((CurrentPage - 1) * PageSize + 1) to @Math.Min(CurrentPage * PageSize, Items.Count()) of @Items.Count() items
                    </div>
                    <nav>
                        <ul class="pagination mb-0">
                            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)">
                                    Previous
                                </button>
                            </li>
                            @for (int i = 1; i <= TotalPages; i++)
                            {
                                var pageNum = i;
                                <li class="page-item @(CurrentPage == pageNum ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(pageNum)">
                                        @pageNum
                                    </button>
                                </li>
                            }
                            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        }
    </div>
</div>

@if (_showDeleteConfirm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    @if (_itemsToDelete.Count == 1)
                    {
                        <p>Are you sure you want to delete this @ItemName.ToLower()?</p>
                    }
                    else
                    {
                        <p>Are you sure you want to delete @_itemsToDelete.Count @ItemNamePlural.ToLower()?</p>
                    }
                    <p class="text-danger mb-0">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        This action cannot be undone.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                        <i class="fas fa-trash me-1"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Title { get; set; } = "Items";
    [Parameter] public string? Subtitle { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string ItemName { get; set; } = "Item";
    [Parameter] public string ItemNamePlural { get; set; } = "Items";
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public string EmptyMessage { get; set; } = "No items found";
    [Parameter] public bool ShowUniqueId { get; set; } = false;
    [Parameter] public Func<TItem, string>? GetUniqueId { get; set; }
    [Parameter] public bool ShowView { get; set; } = true;
    [Parameter] public bool ShowEdit { get; set; } = true;
    [Parameter] public bool ShowDelete { get; set; } = true;
    [Parameter] public bool ShowBulkDelete { get; set; } = true;
    [Parameter] public int PageSize { get; set; } = 20;
    
    [Parameter] public RenderFragment? HeaderActions { get; set; }
    [Parameter] public RenderFragment? FilterOptions { get; set; }
    [Parameter] public RenderFragment? EmptyActions { get; set; }
    [Parameter] public RenderFragment? BulkActions { get; set; }
    [Parameter] public RenderFragment? TableHeaders { get; set; }
    [Parameter] public RenderFragment<TItem> RowTemplate { get; set; } = default!;
    [Parameter] public RenderFragment<TItem>? ItemActions { get; set; }
    
    [Parameter] public EventCallback<TItem> OnViewCallback { get; set; }
    [Parameter] public EventCallback<TItem> OnEditCallback { get; set; }
    [Parameter] public EventCallback<List<TItem>> OnDeleteCallback { get; set; }
    [Parameter] public EventCallback<TItem> OnRowClickCallback { get; set; }
    [Parameter] public Func<TItem, string, bool> SearchFilter { get; set; } = (item, term) => true;

    private string _searchTerm = "";
    private int CurrentPage = 1;
    private List<TItem> SelectedItems = new List<TItem>();
    private bool _showDeleteConfirm = false;
    private List<TItem> _itemsToDelete = new List<TItem>();

    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            CurrentPage = 1;
        }
    }

    private IEnumerable<TItem> FilteredItems => Items?.Where(item => 
        string.IsNullOrWhiteSpace(SearchTerm) || SearchFilter(item, SearchTerm)) ?? Enumerable.Empty<TItem>();

    private IEnumerable<TItem> PagedItems => FilteredItems
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize);

    private int TotalPages => Math.Max(1, (int)Math.Ceiling(FilteredItems.Count() / (double)PageSize));

    private void ClearSearch()
    {
        SearchTerm = "";
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if ((bool)(e.Value ?? false))
        {
            SelectedItems = PagedItems.ToList();
        }
        else
        {
            SelectedItems.Clear();
        }
    }

    private void ToggleItemSelection(TItem item)
    {
        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
        }
        else
        {
            SelectedItems.Add(item);
        }
    }

    private async Task OnView(TItem item)
    {
        if (OnViewCallback.HasDelegate)
        {
            await OnViewCallback.InvokeAsync(item);
        }
    }

    private async Task OnEdit(TItem item)
    {
        if (OnEditCallback.HasDelegate)
        {
            await OnEditCallback.InvokeAsync(item);
        }
    }

    private void OnDelete(TItem item)
    {
        _itemsToDelete = new List<TItem> { item };
        _showDeleteConfirm = true;
    }

    private void OnBulkDelete()
    {
        _itemsToDelete = SelectedItems.ToList();
        _showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        _showDeleteConfirm = false;
        _itemsToDelete.Clear();
    }

    private async Task ConfirmDelete()
    {
        if (OnDeleteCallback.HasDelegate)
        {
            await OnDeleteCallback.InvokeAsync(_itemsToDelete);
            SelectedItems.RemoveAll(item => _itemsToDelete.Contains(item));
        }
        _showDeleteConfirm = false;
        _itemsToDelete.Clear();
    }

    private async Task OnRowClick(TItem item)
    {
        if (OnRowClickCallback.HasDelegate)
        {
            await OnRowClickCallback.InvokeAsync(item);
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
        }
    }
}