@namespace SteelEstimation.Web.Components.Shared.Common
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using SteelEstimation.Core.Models
@using SteelEstimation.Core.Interfaces
@using SteelEstimation.Web.Components.Shared.UI.Tables

<div class="generic-view-switcher">
    <!-- View Controls -->
    <div class="view-controls @ControlsTheme">
        <div class="view-controls-left">
            <div class="view-buttons">
                <button class="btn-view @(CurrentView == "table" ? "active" : "")" 
                        @onclick="@(() => SetView("table"))"
                        title="Table View">
                    <i class="fas fa-table"></i>
                    @if (ShowLabels)
                    {
                        <span class="view-label">Table</span>
                    }
                </button>
                <button class="btn-view @(CurrentView == "card" ? "active" : "")" 
                        @onclick="@(() => SetView("card"))"
                        title="Card View">
                    <i class="fas fa-th"></i>
                    @if (ShowLabels)
                    {
                        <span class="view-label">Cards</span>
                    }
                </button>
                <button class="btn-view @(CurrentView == "list" ? "active" : "")" 
                        @onclick="@(() => SetView("list"))"
                        title="List View">
                    <i class="fas fa-list"></i>
                    @if (ShowLabels)
                    {
                        <span class="view-label">List</span>
                    }
                </button>
            </div>
            
            @if (ViewStateProvider != null)
            {
                <SaveViewPreferences ViewStateProvider="@ViewStateProvider" />
            }
        </div>
        
        <div class="view-controls-right">
            @if (ShowColumnReorder && (CurrentView == "table" || CurrentView == "list") && Columns != null)
            {
                <ColumnReorderManager 
                                      Columns="@Columns" 
                                      OnColumnsReordered="@HandleColumnsReordered" />
            }
            
            @if (ShowCount && FilteredItems != null)
            {
                <span class="item-count">
                    @FilteredItems.Count() items
                </span>
            }
        </div>
    </div>
    
    <!-- Content Area -->
    <div class="view-content">
        @switch (CurrentView)
        {
            case "table":
                @if (TableView != null)
                {
                    @TableView
                }
                else
                {
                    <GenericTableView
                                      Items="@FilteredItems"
                                      Columns="@Columns"
                                      ShowSelection="@ShowSelection"
                                      SelectedItems="@SelectedItems"
                                      SelectedItemsChanged="@SelectedItemsChanged"
                                      OnRowClick="@OnRowClick"
                                      TableClass="@TableClass" />
                }
                break;
                
            case "card":
                @if (CardView != null)
                {
                    @CardView
                }
                else
                {
                    <GenericCardView
                                     Items="@FilteredItems"
                                     CardTemplate="@CardTemplate"
                                     OnCardClick="@OnRowClick"
                                     CardClass="@CardClass" />
                }
                break;
                
            case "list":
                @if (ListView != null)
                {
                    @ListView
                }
                else
                {
                    <GenericListView
                                     Items="@FilteredItems"
                                     ListItemTemplate="@ListItemTemplate"
                                     OnItemClick="@OnRowClick"
                                     ListClass="@ListClass" />
                }
                break;
        }
    </div>
</div>

@code {
    [Inject] private IJSRuntime JS { get; set; } = default!;
    
    // Data Parameters
    [Parameter, EditorRequired] public IEnumerable<object> Items { get; set; } = default!;
    [Parameter] public IEnumerable<object>? FilteredItems { get; set; }
    [Parameter] public List<ColumnDefinition<object>>? Columns { get; set; }
    
    // View Templates
    [Parameter] public RenderFragment? TableView { get; set; }
    [Parameter] public RenderFragment? CardView { get; set; }
    [Parameter] public RenderFragment? ListView { get; set; }
    [Parameter] public RenderFragment<object>? CardTemplate { get; set; }
    [Parameter] public RenderFragment<object>? ListItemTemplate { get; set; }
    
    // Behavior Parameters
    [Parameter] public string CurrentView { get; set; } = "table";
    [Parameter] public EventCallback<string> CurrentViewChanged { get; set; }
    [Parameter] public bool ShowLabels { get; set; } = false;
    [Parameter] public bool ShowCount { get; set; } = true;
    [Parameter] public bool ShowColumnReorder { get; set; } = true;
    [Parameter] public bool ShowSelection { get; set; } = false;
    
    // Selection Parameters
    [Parameter] public HashSet<object>? SelectedItems { get; set; }
    [Parameter] public EventCallback<HashSet<object>> SelectedItemsChanged { get; set; }
    
    // Event Callbacks
    [Parameter] public EventCallback<object> OnRowClick { get; set; }
    [Parameter] public EventCallback<List<ColumnDefinition<object>>> OnColumnsReordered { get; set; }
    
    // CSS Classes
    [Parameter] public string ControlsTheme { get; set; } = "";
    [Parameter] public string TableClass { get; set; } = "";
    [Parameter] public string CardClass { get; set; } = "";
    [Parameter] public string ListClass { get; set; } = "";
    
    // State Management
    [Parameter] public IViewStateProvider? ViewStateProvider { get; set; }
    
    protected override void OnInitialized()
    {
        FilteredItems ??= Items;
    }
    
    private async Task SetView(string view)
    {
        CurrentView = view;
        await CurrentViewChanged.InvokeAsync(view);
        
        if (ViewStateProvider != null)
        {
            await ViewStateProvider.SaveViewPreference("currentView", view);
        }
    }
    
    private async Task HandleColumnsReordered(List<ColumnDefinition<object>> reorderedColumns)
    {
        Columns = reorderedColumns;
        await OnColumnsReordered.InvokeAsync(reorderedColumns);
        
        if (ViewStateProvider != null)
        {
            var columnOrder = reorderedColumns.Select(c => c.Key).ToList();
            await ViewStateProvider.SaveViewPreference("columnOrder", string.Join(",", columnOrder));
        }
    }
    
    public async Task RefreshView()
    {
        StateHasChanged();
        await Task.CompletedTask;
    }
}

<style>
    .generic-view-switcher {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .view-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: var(--bs-light);
        border-bottom: 1px solid var(--bs-border-color);
    }
    
    .view-controls-left,
    .view-controls-right {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .view-buttons {
        display: flex;
        gap: 0.25rem;
        background: white;
        border-radius: 0.375rem;
        padding: 0.125rem;
    }
    
    .btn-view {
        background: transparent;
        border: none;
        padding: 0.5rem 0.75rem;
        cursor: pointer;
        border-radius: 0.25rem;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .btn-view:hover {
        background: var(--bs-gray-200);
    }
    
    .btn-view.active {
        background: var(--bs-primary);
        color: white;
    }
    
    .view-label {
        font-size: 0.875rem;
    }
    
    .item-count {
        color: var(--bs-secondary);
        font-size: 0.875rem;
    }
    
    .view-content {
        flex: 1;
        overflow: auto;
        padding: 1rem;
    }
</style>