@using SteelEstimation.Core.Models
@using SteelEstimation.Core.Entities
@using Microsoft.AspNetCore.Components
@typeparam TItem where TItem : class, new()
@inject IJSRuntime JSRuntime

<div class="editable-list">
    @if (Items?.Any() == true)
    {
        @foreach (var item in Items)
        {
            var isEditing = editingItem == item;
            var isSelected = SelectedItems?.Contains(item) == true;
            
            <div class="list-item @(isSelected ? "selected" : "") @(isEditing ? "editing" : "")"
                 @key="item">
                
                @if (isEditing)
                {
                    <!-- Edit Mode - Expanded -->
                    <div class="list-item-edit">
                        @if (Config?.ShowSelectionColumn == true)
                        {
                            <div class="list-item-header">
                                <input type="checkbox" class="form-check-input me-2" 
                                       checked="@isSelected"
                                       @onchange="@(() => HandleSelectionChange(item, !isSelected))" />
                                <span class="fw-semibold">@GetItemTitle(item)</span>
                            </div>
                        }
                        
                        <div class="edit-fields-inline">
                            <div class="row g-2">
                                @foreach (var column in Config?.Columns ?? new())
                                {
                                    if (column.IsVisible && column.IsEditable)
                                    {
                                        <div class="col-md-@(GetColumnWidth(column))">
                                            <label class="form-label small mb-1">@column.DisplayName</label>
                                            <EditableCell TItem="TItem"
                                                         Item="@editItem"
                                                         Template="@column"
                                                         OnValueChanged="@(value => HandleCellValueChanged(column, value))" />
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                        
                        <div class="list-item-actions mt-2">
                            <button class="btn btn-sm btn-success me-2" @onclick="@(() => SaveItem(item))">
                                <i class="fas fa-check"></i> Save
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- View Mode - Compact -->
                    <div class="list-item-view">
                        <div class="list-item-content">
                            @if (Config?.ShowSelectionColumn == true)
                            {
                                <input type="checkbox" class="form-check-input me-2" 
                                       checked="@isSelected"
                                       @onclick:stopPropagation="true"
                                       @onchange="@(() => HandleSelectionChange(item, !isSelected))" />
                            }
                            
                            <div class="list-item-main">
                                <div class="list-item-title">@GetItemTitle(item)</div>
                                <div class="list-item-metadata">
                                    @foreach (var column in GetMetadataColumns())
                                    {
                                        var value = GetDisplayValue(column, item);
                                        if (!string.IsNullOrEmpty(value))
                                        {
                                            <span class="metadata-item">
                                                @if (column.Type == CellType.Image)
                                                {
                                                    var images = column.GetValue?.Invoke(item);
                                                    if (images is List<ImageUpload> imgList && imgList.Any())
                                                    {
                                                        <i class="fas fa-image"></i>
                                                        <span>@imgList.Count image@(imgList.Count != 1 ? "s" : "")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">No images</span>
                                                    }
                                                }
                                                else
                                                {
                                                    @value
                                                }
                                            </span>
                                            @if (column != GetMetadataColumns().Last())
                                            {
                                                <span class="metadata-separator">â€¢</span>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                            
                            <div class="list-item-actions">
                                <button class="btn btn-sm btn-outline-primary me-1" 
                                        @onclick="@(() => StartEdit(item))"
                                        title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                @if (Config?.AllowDeleteRows == true)
                                {
                                    <button class="btn btn-sm btn-outline-danger" 
                                            @onclick="@(() => DeleteItem(item))"
                                            title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <div class="text-center p-4 text-muted">
            <i class="fas fa-inbox fa-3x mb-3"></i>
            <p>@(Config?.EmptyMessage ?? "No items to display")</p>
        </div>
    }
    
    @if (Config?.AllowAddRows == true)
    {
        <div class="list-item-add mt-3">
            <button class="btn btn-sm btn-outline-primary" @onclick="AddNewItem">
                <i class="fas fa-plus"></i> Add New Item
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public List<TItem>? Items { get; set; }
    [Parameter] public EditableTableConfig<TItem>? Config { get; set; }
    [Parameter] public List<TItem>? SelectedItems { get; set; }
    [Parameter] public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }
    [Parameter] public EventCallback<TItem> OnRowSaved { get; set; }
    [Parameter] public EventCallback<TItem> OnRowDeleted { get; set; }
    [Parameter] public EventCallback OnRowAdded { get; set; }
    
    private TItem? editingItem;
    private TItem? editItem;
    private Dictionary<string, bool> validationErrors = new();
    private System.Timers.Timer? autoSaveTimer;
    
    protected override void OnInitialized()
    {
        if (Config?.AutoSave == true && Config.AutoSaveDelayMs > 0)
        {
            autoSaveTimer = new System.Timers.Timer(Config.AutoSaveDelayMs);
            autoSaveTimer.Elapsed += async (sender, e) => await AutoSave();
            autoSaveTimer.AutoReset = false;
        }
    }
    
    private string GetItemTitle(TItem item)
    {
        // Get the first text column value as title
        var titleColumn = Config?.Columns.FirstOrDefault(c => 
            c.Type == CellType.Text && c.GetValue != null);
        
        if (titleColumn == null)
        {
            titleColumn = Config?.Columns.FirstOrDefault(c => c.GetValue != null);
        }
        
        return titleColumn?.GetValue?.Invoke(item)?.ToString() ?? "Item";
    }
    
    private IEnumerable<CellTemplate<TItem>> GetMetadataColumns()
    {
        // Get 2-3 key columns to show as metadata
        return Config?.Columns
            .Where(c => c.IsVisible && c.Type != CellType.Action)
            .Skip(1) // Skip the title column
            .Take(3) ?? Enumerable.Empty<CellTemplate<TItem>>();
    }
    
    private string GetDisplayValue(CellTemplate<TItem> column, TItem item)
    {
        if (column.ComputeDisplay != null)
        {
            var fragment = column.ComputeDisplay(item);
            // Convert RenderFragment to string (simplified)
            return fragment?.ToString() ?? "";
        }
        
        var value = column.GetValue?.Invoke(item);
        if (value == null) return "";
        
        // Format based on type
        return column.Type switch
        {
            CellType.Number when value is decimal d => d.ToString(column.DecimalPlaces.HasValue ? $"F{column.DecimalPlaces}" : "F2"),
            CellType.Date when value is DateTime dt => dt.ToString("yyyy-MM-dd"),
            CellType.DateTime when value is DateTime dt => dt.ToString("yyyy-MM-dd HH:mm"),
            CellType.Checkbox when value is bool b => b ? "Yes" : "No",
            _ => value.ToString() ?? ""
        };
    }
    
    private int GetColumnWidth(CellTemplate<TItem> column)
    {
        // Responsive column widths for inline editing
        return column.Type switch
        {
            CellType.Text => 6,
            CellType.Number => 3,
            CellType.Date => 4,
            CellType.Select => 4,
            CellType.Image => 12,
            _ => 4
        };
    }
    
    private void StartEdit(TItem item)
    {
        // Only one item can be edited at a time (accordion style)
        if (editingItem != null && editingItem != item)
        {
            CancelEdit();
        }
        
        editingItem = item;
        editItem = CloneItem(item);
        validationErrors.Clear();
        StateHasChanged();
    }
    
    private void CancelEdit()
    {
        editingItem = null;
        editItem = null;
        validationErrors.Clear();
        autoSaveTimer?.Stop();
        StateHasChanged();
    }
    
    private async Task SaveItem(TItem originalItem)
    {
        if (editItem == null) return;
        
        // Validate all fields
        bool hasErrors = false;
        foreach (var column in Config?.Columns ?? new())
        {
            if (column.Validate != null)
            {
                var value = column.GetValue?.Invoke(editItem);
                var error = column.Validate(editItem, value);
                if (!string.IsNullOrEmpty(error))
                {
                    validationErrors[column.Key] = true;
                    hasErrors = true;
                }
            }
        }
        
        if (hasErrors)
        {
            StateHasChanged();
            return;
        }
        
        // Copy edited values back to original item
        CopyItemValues(editItem, originalItem);
        
        editingItem = null;
        editItem = null;
        validationErrors.Clear();
        autoSaveTimer?.Stop();
        
        await OnRowSaved.InvokeAsync(originalItem);
        StateHasChanged();
    }
    
    private async Task DeleteItem(TItem item)
    {
        if (item != null)
        {
            Items?.Remove(item);
            await OnRowDeleted.InvokeAsync(item);
            StateHasChanged();
        }
    }
    
    private async Task AddNewItem()
    {
        var newItem = new TItem();
        Items?.Add(newItem);
        await OnRowAdded.InvokeAsync();
        StartEdit(newItem);
    }
    
    private async Task HandleSelectionChange(TItem item, bool isSelected)
    {
        SelectedItems ??= new List<TItem>();
        
        if (isSelected && !SelectedItems.Contains(item))
        {
            SelectedItems.Add(item);
        }
        else if (!isSelected)
        {
            SelectedItems.Remove(item);
        }
        
        await SelectedItemsChanged.InvokeAsync(SelectedItems);
        StateHasChanged();
    }
    
    private async Task HandleCellValueChanged(CellTemplate<TItem> column, object? value)
    {
        if (editItem == null) return;
        
        // Set the value
        column.SetValue?.Invoke(editItem, value);
        
        // Validate
        if (column.Validate != null)
        {
            var error = column.Validate(editItem, value);
            if (!string.IsNullOrEmpty(error))
            {
                validationErrors[column.Key] = true;
            }
            else
            {
                validationErrors.Remove(column.Key);
            }
        }
        
        // Trigger auto-save timer
        if (Config?.AutoSave == true && !validationErrors.Any())
        {
            autoSaveTimer?.Stop();
            autoSaveTimer?.Start();
        }
        
        StateHasChanged();
    }
    
    private async Task AutoSave()
    {
        await InvokeAsync(async () =>
        {
            if (!validationErrors.Any() && editingItem != null)
            {
                await SaveItem(editingItem);
            }
        });
    }
    
    private TItem CloneItem(TItem source)
    {
        var json = System.Text.Json.JsonSerializer.Serialize(source);
        return System.Text.Json.JsonSerializer.Deserialize<TItem>(json) ?? new TItem();
    }
    
    private void CopyItemValues(TItem source, TItem target)
    {
        foreach (var prop in typeof(TItem).GetProperties())
        {
            if (prop.CanRead && prop.CanWrite)
            {
                prop.SetValue(target, prop.GetValue(source));
            }
        }
    }
    
    public void Dispose()
    {
        autoSaveTimer?.Dispose();
    }
}

<style>
    .editable-list {
        display: flex;
        flex-direction: column;
        gap: 1px;
        background-color: #e9ecef;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        overflow: hidden;
    }
    
    .list-item {
        background-color: white;
        transition: all 0.3s ease;
    }
    
    .list-item:hover:not(.editing) {
        background-color: #f8f9fa;
    }
    
    .list-item.selected {
        background-color: #e3f2fd;
    }
    
    .list-item.editing {
        background-color: #fffef5;
        border-left: 4px solid #ffc107;
        padding-left: 12px;
    }
    
    .list-item-view {
        padding: 12px 16px;
    }
    
    .list-item-edit {
        padding: 16px;
        animation: slideDown 0.3s ease-out;
    }
    
    .list-item-content {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .list-item-main {
        flex-grow: 1;
    }
    
    .list-item-title {
        font-weight: 600;
        font-size: 1rem;
        color: #212529;
        margin-bottom: 4px;
    }
    
    .list-item-metadata {
        font-size: 0.875rem;
        color: #6c757d;
        display: flex;
        align-items: center;
        gap: 4px;
    }
    
    .metadata-item {
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }
    
    .metadata-separator {
        margin: 0 4px;
        color: #adb5bd;
    }
    
    .list-item-actions {
        display: flex;
        gap: 4px;
        flex-shrink: 0;
    }
    
    .list-item-header {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
    
    .edit-fields-inline {
        margin: 12px 0;
    }
    
    .list-item-add {
        background-color: white;
        padding: 12px;
        text-align: center;
        border-top: 1px solid #dee2e6;
    }
    
    @@keyframes slideDown {
        from {
            max-height: 0;
            opacity: 0;
        }
        to {
            max-height: 500px;
            opacity: 1;
        }
    }
    
    /* Mobile responsive */
    @@media (max-width: 768px) {
        .list-item-content {
            flex-direction: column;
            align-items: start;
        }
        
        .list-item-actions {
            margin-top: 8px;
            width: 100%;
            justify-content: flex-start;
        }
        
        .list-item-metadata {
            flex-wrap: wrap;
        }
        
        .edit-fields-inline .row {
            margin: 0;
        }
        
        .edit-fields-inline .col-md-3,
        .edit-fields-inline .col-md-4,
        .edit-fields-inline .col-md-6,
        .edit-fields-inline .col-md-12 {
            width: 100%;
            padding: 0;
            margin-bottom: 8px;
        }
    }
    
    /* Zebra striping */
    .list-item:nth-child(even):not(.editing):not(.selected) {
        background-color: #f8f9fa;
    }
    
    .list-item:nth-child(even):hover:not(.editing):not(.selected) {
        background-color: #e9ecef;
    }
</style>