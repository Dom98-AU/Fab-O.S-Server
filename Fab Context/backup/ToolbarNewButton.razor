@namespace SteelEstimation.Web.Components.Shared.Common
@using Microsoft.AspNetCore.Components
@using SteelEstimation.Core.Models

@if (Actions?.Any(a => a.IsVisible) == true)
{
    @if (Actions.Count == 1 && !ForceDropdown)
    {
        var action = Actions.First();
        @if (!string.IsNullOrEmpty(action.NavigateUrl))
        {
            <a href="@action.NavigateUrl" 
               class="btn btn-toolbar btn-new"
               title="@(action.Tooltip ?? action.Label)">
                <i class="@(action.Icon ?? DefaultIcon)"></i>
                <span>@(string.IsNullOrEmpty(ButtonText) ? action.Label : ButtonText)</span>
            </a>
        }
        else
        {
            <button class="btn btn-toolbar btn-new" 
                    @onclick="async () => await ExecuteSingleAction(action)"
                    disabled="@(!action.IsEnabled)"
                    title="@(action.Tooltip ?? action.Label)">
                <i class="@(action.Icon ?? DefaultIcon)"></i>
                <span>@(string.IsNullOrEmpty(ButtonText) ? action.Label : ButtonText)</span>
            </button>
        }
    }
    else
    {
        <ToolbarDropdown Actions="@Actions"
                        ButtonText="@ButtonText"
                        ButtonIcon="@DefaultIcon"
                        ButtonClass="btn-new"
                        OnActionExecuted="@OnActionExecuted" />
    }
}
else if (DefaultUrl != null)
{
    <a href="@DefaultUrl" class="btn btn-toolbar btn-new">
        <i class="@DefaultIcon"></i>
        <span>@ButtonText</span>
    </a>
}
else if (DefaultAction.HasDelegate)
{
    <button class="btn btn-toolbar btn-new" @onclick="DefaultAction">
        <i class="@DefaultIcon"></i>
        <span>@ButtonText</span>
    </button>
}

@code {
    /// <summary>
    /// List of actions for the New button/dropdown
    /// </summary>
    [Parameter] public List<ToolbarAction>? Actions { get; set; }
    
    /// <summary>
    /// Text to display on the button (defaults to "New")
    /// </summary>
    [Parameter] public string ButtonText { get; set; } = "New";
    
    /// <summary>
    /// Default icon for the button
    /// </summary>
    [Parameter] public string DefaultIcon { get; set; } = "fas fa-plus";
    
    /// <summary>
    /// Force dropdown even with single action
    /// </summary>
    [Parameter] public bool ForceDropdown { get; set; } = false;
    
    /// <summary>
    /// Default URL for simple navigation (when no actions provided)
    /// </summary>
    [Parameter] public string? DefaultUrl { get; set; }
    
    /// <summary>
    /// Default action callback (when no actions provided)
    /// </summary>
    [Parameter] public EventCallback DefaultAction { get; set; }
    
    /// <summary>
    /// Callback when an action is executed
    /// </summary>
    [Parameter] public EventCallback<ToolbarAction> OnActionExecuted { get; set; }
    
    private async Task ExecuteSingleAction(ToolbarAction action)
    {
        if (!action.IsEnabled)
            return;
            
        if (action.OnClick != null)
        {
            await action.OnClick.Invoke();
        }
        
        if (OnActionExecuted.HasDelegate)
        {
            await OnActionExecuted.InvokeAsync(action);
        }
    }
}